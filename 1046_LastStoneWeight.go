/***********************************************************************************************************
*执行用时：0 ms, 在所有 Go 提交中击败了 100.00% 的用户
*内存消耗：1.9 MB, 在所有 Go 提交中击败了100.00%的用户
************************************************************************************************************
*/

/***********************************************************************************************************
有一堆石头，每块石头的重量都是正整数。

每一回合，从中选出两块 最重的 石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：

如果 x == y，那么两块石头都会被完全粉碎；
如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/last-stone-weight
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。                                            
************************************************************************************************************
*/

func lastStoneWeight(stones []int) int {
    
    if len(stones) == 1 {
        return stones[0]
    }

    res := 0
    buff := stones

    for {

        max := 0
        second := -1
        for i := 1; i < len(buff); i++ {
            if buff[max] <= buff[i] {
                second = max
                max = i        
            } else {
                if second >= 0 {
                    if buff[second] <= buff[i] {
                        second = i
                    }
                    
                } else {
                    second = i
                }
            }

        }

        if buff[second] == 0 {
            res = buff[max]
            break
        }
     
        if buff[max] != buff[second] {
            buff[max] -= buff[second]    
        } else {
            buff[max] = 0
        }
        buff[second] = 0

        //fmt.Println(buff)
    }

    return res

}