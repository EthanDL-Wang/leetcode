/***********************************************************************************************************
*执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户
*内存消耗：2.7 MB, 在所有 Go 提交中击败了90.38%的用户
************************************************************************************************************
*/

/***********************************************************************************************************
数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。
************************************************************************************************************
*/

var res []string

func dps(a []byte, l int, r int, n int) {

    if l == 0 && r == 0 {

        if len(a) != n*2 {
            return 
        }

        tmp := make([]byte, len(a))
        copy(tmp,a)
        res = append(res, string(tmp))
        return 
    }

    if l > r {
        return 
    }

    if l > 0 {
        a = append(a, '(')
        dps(a, l-1, r, n)
        a = a[:len(a)-1]
    }

    if r > 0 {
        a = append(a, ')')
        dps(a, l, r-1, n)
        a = a[:len(a)-1]
    }
}


func generateParenthesis(n int) []string {

    res = make([]string, 0)

    left := n
    right := n

    a := []byte{}

    dps(a, left, right, n)

    return res
}