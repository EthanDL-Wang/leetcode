/***********************************************************************************************************
*执行用时：28 ms, 在所有 Go 提交中击败了49.38%的用户
*内存消耗：7.4 MB, 在所有 Go 提交中击败了10.60%的用户
************************************************************************************************************
*/

/***********************************************************************************************************
输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。

要求时间复杂度为O(n)。
************************************************************************************************************
*/

func maxSubArray(nums []int) int {

    lenNums := len(nums)
    sliceDup := make([]int, lenNums)

    
    sliceDup[0] = nums[0]
    var max int = sliceDup[0]

    for i := 1; i < lenNums; i++ {

        if sliceDup[i-1] > 0 {
            sliceDup[i] = sliceDup[i-1] + nums[i]
        } else {
            sliceDup[i] =  nums[i]
        }

        if sliceDup[i] > max {
            max = sliceDup[i]
        }

    }


    return max

}