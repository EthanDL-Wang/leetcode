/***********************************************************************************************************
*执行用时：4 ms, 在所有 Go 提交中击败了79.49%的用户
*内存消耗：3 MB, 在所有 Go 提交中击败了100.00%的用户
*1.桶排序，统计s元素的个数
*2.重新按题目要求排序
************************************************************************************************************
*/

/***********************************************************************************************************
*给你一个字符串 s ，请你根据下面的算法重新构造字符串：

从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。
从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。
重复步骤 2 ，直到你没法从 s 中选择字符。
从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。
从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。
重复步骤 5 ，直到你没法从 s 中选择字符。
重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。
在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。

请你返回将 s 中字符重新排序后的 结果字符串 。
************************************************************************************************************
*/


func sortString(s string) string {

    const LEN int = 26

    buff := make([]int, LEN)
    len := len(s)
    sliceS := make([]byte, len)

    for _,v := range s {
        buff[v-'a']++
    }

    var index int
    

    for index < len {
        for i := 0; i < LEN; i++ {
            if buff[i] > 0 {
                sliceS[index] = byte('a' + i)
                index++
                buff[i]--
            }
        }

        for i := LEN-1; i >= 0; i-- {
            if buff[i] > 0 {
                sliceS[index] = byte('a' + i)
                index++
                buff[i]--
            }
        }        

    } 

    return string(sliceS)

}