/***********************************************************************************************************
*执行用时：16 ms, 在所有 Go 提交中击败了97.05%的用户
*内存消耗：6.2 MB, 在所有 Go 提交中击败了45.56%的用户
*1.
************************************************************************************************************
*/

/***********************************************************************************************************
老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。

你需要按照以下要求，帮助老师给这些孩子分发糖果：

每个孩子至少分配到 1 个糖果。
相邻的孩子中，评分高的孩子必须获得更多的糖果。
那么这样下来，老师至少需要准备多少颗糖果呢？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/candy
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
************************************************************************************************************
*/

func candy(ratings []int) int {

    res := 0

    buffLeft := make([]int, len(ratings))

    buffLeft[0] = 1
    for i := 1; i < len(ratings); i++ {
        if ratings[i] > ratings[i-1] {
            buffLeft[i] = buffLeft[i-1] + 1
        } else {
            buffLeft[i] = 1
        }
    }

    right := 1
    res += int(math.Max(float64(buffLeft[len(ratings)-1]), float64(right)))
    for i := len(ratings) - 2; i >= 0; i-- {
        if ratings[i] > ratings[i+1] {
            right += 1
        } else {
            right = 1
        }

        res += int(math.Max(float64(buffLeft[i]), float64(right)))

    }

    return res
}