/***********************************************************************************************************
*执行用时：112 ms, 在所有 Go 提交中击败了28.43%的用户
*内存消耗：7.1 MB, 在所有 Go 提交中击败了86.22%的用户
*1.申请二维数组[][0]int
*2.[i][0]表示手中无股票时的最大盈利=即前一天手中就没有股票，和当天卖出后的最大值
*3.[i][1]表示手中有股票时的最大盈利=即前一天手中有股票，和当天买入的最大值
************************************************************************************************************
*/

/***********************************************************************************************************
给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。

你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。

返回获得利润的最大值。

注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
************************************************************************************************************
*/


func maxProfit(prices []int, fee int) int {

    buff := make([][2]int, len(prices))

    buff[0][0] = 0
    buff[0][1] = -prices[0]

    for i := 1; i < len(prices); i++ {

        buff[i][0] = int(math.Max(float64(buff[i-1][0]), float64(buff[i-1][1]+prices[i]-fee)))
        buff[i][1] = int(math.Max(float64(buff[i-1][1]), float64(buff[i-1][0]-prices[i])))
    }


    return int(math.Max(float64(buff[len(prices)-1][0]), float64(buff[len(prices)-1][1])))


}