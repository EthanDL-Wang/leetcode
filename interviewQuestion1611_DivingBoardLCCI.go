/***********************************************************************************************************
*执行用时：28 ms, 在所有 Go 提交中击败了25.13%的用户
*内存消耗：7.5 MB, 在所有 Go 提交中击败了18.57%的用户
************************************************************************************************************
*/

/***********************************************************************************************************
你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为shorter，长度较长的木板长度为longer。你必须正好使用k块木板。编写一个方法，生成跳水板所有可能的长度。

返回的长度需要从小到大排列。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/diving-board-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
************************************************************************************************************
*/



func divingBoard(shorter int, longer int, k int) []int {

    if k == 0 {
        return nil
    }

    if shorter == longer {
        return []int{shorter*k}
    } 

    answer := make([]int, k+1)

    for i := 0; i <= k; i++ {
        answer[i] = shorter*(k-i) + longer*i
    }

    return answer



}